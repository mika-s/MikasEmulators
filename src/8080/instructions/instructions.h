#ifndef MIKA_EMULATORS_8080_INSTRUCTIONS_INSTRUCTIONS_H
#define MIKA_EMULATORS_8080_INSTRUCTIONS_INSTRUCTIONS_H

#include <vector>
#include <string>
#include "8080/emulator_memory.h"
#include "8080/flags.h"
#include "crosscutting/typedefs.h"
#include "crosscutting/misc/next_byte.h"
#include "crosscutting/misc/next_word.h"

// @formatter:off

constexpr unsigned int NOP           = 0x00;
constexpr unsigned int LXI_B         = 0x01;
constexpr unsigned int STAX_B        = 0x02;
constexpr unsigned int INX_B         = 0x03;
constexpr unsigned int INR_B         = 0x04;
constexpr unsigned int DCR_B         = 0x05;
constexpr unsigned int MVI_B         = 0x06;
constexpr unsigned int RLC_B         = 0x07;
constexpr unsigned int UNUSED_NOP_1  = 0x08;
constexpr unsigned int DAD_B         = 0x09;
constexpr unsigned int LDAX_B        = 0x0A;
constexpr unsigned int DCX_B         = 0x0B;
constexpr unsigned int INR_C         = 0x0C;
constexpr unsigned int DCR_C         = 0x0D;
constexpr unsigned int MVI_C         = 0x0E;
constexpr unsigned int RRC           = 0x0F;
constexpr unsigned int UNUSED_NOP_2  = 0x10;
constexpr unsigned int LXI_D         = 0x11;
constexpr unsigned int STAX_D        = 0x12;
constexpr unsigned int INX_D         = 0x13;
constexpr unsigned int INR_D         = 0x14;
constexpr unsigned int DCR_D         = 0x15;
constexpr unsigned int MVI_D         = 0x16;
constexpr unsigned int RAL           = 0x17;
constexpr unsigned int UNUSED_NOP_3  = 0x18;
constexpr unsigned int DAD_D         = 0x19;
constexpr unsigned int LDAX_D        = 0x1A;
constexpr unsigned int DCX_D         = 0x1B;
constexpr unsigned int INR_E         = 0x1C;
constexpr unsigned int DCR_E         = 0x1D;
constexpr unsigned int MVI_E         = 0x1E;
constexpr unsigned int RAR           = 0x1F;
constexpr unsigned int UNUSED_NOP_4  = 0x20;
constexpr unsigned int LXI_H         = 0x21;
constexpr unsigned int SHLD          = 0x22;
constexpr unsigned int INX_H         = 0x23;
constexpr unsigned int INR_H         = 0x24;
constexpr unsigned int DCR_H         = 0x25;
constexpr unsigned int MVI_H         = 0x26;
constexpr unsigned int DAA           = 0x27;
constexpr unsigned int UNUSED_NOP_5  = 0x28;
constexpr unsigned int DAD_H         = 0x29;
constexpr unsigned int LHLD          = 0x2A;
constexpr unsigned int DCX_H         = 0x2B;
constexpr unsigned int INR_L         = 0x2C;
constexpr unsigned int DCR_L         = 0x2D;
constexpr unsigned int MVI_L         = 0x2E;
constexpr unsigned int CMA           = 0x2F;
constexpr unsigned int UNUSED_NOP_6  = 0x30;
constexpr unsigned int LXI_SP        = 0x31;
constexpr unsigned int STA           = 0x32;
constexpr unsigned int INX_SP        = 0x33;
constexpr unsigned int INR_M         = 0x34;
constexpr unsigned int DCR_M         = 0x35;
constexpr unsigned int MVI_M         = 0x36;
constexpr unsigned int STC           = 0x37;
constexpr unsigned int UNUSED_NOP_7  = 0x38;
constexpr unsigned int DAD_SP        = 0x39;
constexpr unsigned int LDA           = 0x3A;
constexpr unsigned int DCX_SP        = 0x3B;
constexpr unsigned int INR_A         = 0x3C;
constexpr unsigned int DCR_A         = 0x3D;
constexpr unsigned int MVI_A         = 0x3E;
constexpr unsigned int CMC           = 0x3F;
constexpr unsigned int MOV_B_B       = 0x40;
constexpr unsigned int MOV_B_C       = 0x41;
constexpr unsigned int MOV_B_D       = 0x42;
constexpr unsigned int MOV_B_E       = 0x43;
constexpr unsigned int MOV_B_H       = 0x44;
constexpr unsigned int MOV_B_L       = 0x45;
constexpr unsigned int MOV_B_M       = 0x46;
constexpr unsigned int MOV_B_A       = 0x47;
constexpr unsigned int MOV_C_B       = 0x48;
constexpr unsigned int MOV_C_C       = 0x49;
constexpr unsigned int MOV_C_D       = 0x4A;
constexpr unsigned int MOV_C_E       = 0x4B;
constexpr unsigned int MOV_C_H       = 0x4C;
constexpr unsigned int MOV_C_L       = 0x4D;
constexpr unsigned int MOV_C_M       = 0x4E;
constexpr unsigned int MOV_C_A       = 0x4F;
constexpr unsigned int MOV_D_B       = 0x50;
constexpr unsigned int MOV_D_C       = 0x51;
constexpr unsigned int MOV_D_D       = 0x52;
constexpr unsigned int MOV_D_E       = 0x53;
constexpr unsigned int MOV_D_H       = 0x54;
constexpr unsigned int MOV_D_L       = 0x55;
constexpr unsigned int MOV_D_M       = 0x56;
constexpr unsigned int MOV_D_A       = 0x57;
constexpr unsigned int MOV_E_B       = 0x58;
constexpr unsigned int MOV_E_C       = 0x59;
constexpr unsigned int MOV_E_D       = 0x5A;
constexpr unsigned int MOV_E_E       = 0x5B;
constexpr unsigned int MOV_E_H       = 0x5C;
constexpr unsigned int MOV_E_L       = 0x5D;
constexpr unsigned int MOV_E_M       = 0x5E;
constexpr unsigned int MOV_E_A       = 0x5F;
constexpr unsigned int MOV_H_B       = 0x60;
constexpr unsigned int MOV_H_C       = 0x61;
constexpr unsigned int MOV_H_D       = 0x62;
constexpr unsigned int MOV_H_E       = 0x63;
constexpr unsigned int MOV_H_H       = 0x64;
constexpr unsigned int MOV_H_L       = 0x65;
constexpr unsigned int MOV_H_M       = 0x66;
constexpr unsigned int MOV_H_A       = 0x67;
constexpr unsigned int MOV_L_B       = 0x68;
constexpr unsigned int MOV_L_C       = 0x69;
constexpr unsigned int MOV_L_D       = 0x6A;
constexpr unsigned int MOV_L_E       = 0x6B;
constexpr unsigned int MOV_L_H       = 0x6C;
constexpr unsigned int MOV_L_L       = 0x6D;
constexpr unsigned int MOV_L_M       = 0x6E;
constexpr unsigned int MOV_L_A       = 0x6F;
constexpr unsigned int MOV_M_B       = 0x70;
constexpr unsigned int MOV_M_C       = 0x71;
constexpr unsigned int MOV_M_D       = 0x72;
constexpr unsigned int MOV_M_E       = 0x73;
constexpr unsigned int MOV_M_H       = 0x74;
constexpr unsigned int MOV_M_L       = 0x75;
constexpr unsigned int HLT           = 0x76;
constexpr unsigned int MOV_M_A       = 0x77;
constexpr unsigned int MOV_A_B       = 0x78;
constexpr unsigned int MOV_A_C       = 0x79;
constexpr unsigned int MOV_A_D       = 0x7A;
constexpr unsigned int MOV_A_E       = 0x7B;
constexpr unsigned int MOV_A_H       = 0x7C;
constexpr unsigned int MOV_A_L       = 0x7D;
constexpr unsigned int MOV_A_M       = 0x7E;
constexpr unsigned int MOV_A_A       = 0x7F;
constexpr unsigned int ADD_B         = 0x80;
constexpr unsigned int ADD_C         = 0x81;
constexpr unsigned int ADD_D         = 0x82;
constexpr unsigned int ADD_E         = 0x83;
constexpr unsigned int ADD_H         = 0x84;
constexpr unsigned int ADD_L         = 0x85;
constexpr unsigned int ADD_M         = 0x86;
constexpr unsigned int ADD_A         = 0x87;
constexpr unsigned int ADC_B         = 0x88;
constexpr unsigned int ADC_C         = 0x89;
constexpr unsigned int ADC_D         = 0x8A;
constexpr unsigned int ADC_E         = 0x8B;
constexpr unsigned int ADC_H         = 0x8C;
constexpr unsigned int ADC_L         = 0x8D;
constexpr unsigned int ADC_M         = 0x8E;
constexpr unsigned int ADC_A         = 0x8F;
constexpr unsigned int SUB_B         = 0x90;
constexpr unsigned int SUB_C         = 0x91;
constexpr unsigned int SUB_D         = 0x92;
constexpr unsigned int SUB_E         = 0x93;
constexpr unsigned int SUB_H         = 0x94;
constexpr unsigned int SUB_L         = 0x95;
constexpr unsigned int SUB_M         = 0x96;
constexpr unsigned int SUB_A         = 0x97;
constexpr unsigned int SBB_B         = 0x98;
constexpr unsigned int SBB_C         = 0x99;
constexpr unsigned int SBB_D         = 0x9A;
constexpr unsigned int SBB_E         = 0x9B;
constexpr unsigned int SBB_H         = 0x9C;
constexpr unsigned int SBB_L         = 0x9D;
constexpr unsigned int SBB_M         = 0x9E;
constexpr unsigned int SBB_A         = 0x9F;
constexpr unsigned int ANA_B         = 0xA0;
constexpr unsigned int ANA_C         = 0xA1;
constexpr unsigned int ANA_D         = 0xA2;
constexpr unsigned int ANA_E         = 0xA3;
constexpr unsigned int ANA_H         = 0xA4;
constexpr unsigned int ANA_L         = 0xA5;
constexpr unsigned int ANA_M         = 0xA6;
constexpr unsigned int ANA_A         = 0xA7;
constexpr unsigned int XRA_B         = 0xA8;
constexpr unsigned int XRA_C         = 0xA9;
constexpr unsigned int XRA_D         = 0xAA;
constexpr unsigned int XRA_E         = 0xAB;
constexpr unsigned int XRA_H         = 0xAC;
constexpr unsigned int XRA_L         = 0xAD;
constexpr unsigned int XRA_M         = 0xAE;
constexpr unsigned int XRA_A         = 0xAF;
constexpr unsigned int ORA_B         = 0xB0;
constexpr unsigned int ORA_C         = 0xB1;
constexpr unsigned int ORA_D         = 0xB2;
constexpr unsigned int ORA_E         = 0xB3;
constexpr unsigned int ORA_H         = 0xB4;
constexpr unsigned int ORA_L         = 0xB5;
constexpr unsigned int ORA_M         = 0xB6;
constexpr unsigned int ORA_A         = 0xB7;
constexpr unsigned int CMP_B         = 0xB8;
constexpr unsigned int CMP_C         = 0xB9;
constexpr unsigned int CMP_D         = 0xBA;
constexpr unsigned int CMP_E         = 0xBB;
constexpr unsigned int CMP_H         = 0xBC;
constexpr unsigned int CMP_L         = 0xBD;
constexpr unsigned int CMP_M         = 0xBE;
constexpr unsigned int CMP_A         = 0xBF;
constexpr unsigned int RNZ           = 0xC0;
constexpr unsigned int POP_B         = 0xC1;
constexpr unsigned int JNZ           = 0xC2;
constexpr unsigned int JMP           = 0xC3;
constexpr unsigned int CNZ           = 0xC4;
constexpr unsigned int PUSH_B        = 0xC5;
constexpr unsigned int ADI           = 0xC6;
constexpr unsigned int RST_0         = 0xC7;
constexpr unsigned int RZ            = 0xC8;
constexpr unsigned int RET           = 0xC9;
constexpr unsigned int JZ            = 0xCA;
constexpr unsigned int UNUSED_JMP_1  = 0xCB;
constexpr unsigned int CZ            = 0xCC;
constexpr unsigned int CALL          = 0xCD;
constexpr unsigned int ACI           = 0xCE;
constexpr unsigned int RST_1         = 0xCF;
constexpr unsigned int RNC           = 0xD0;
constexpr unsigned int POP_D         = 0xD1;
constexpr unsigned int JNC           = 0xD2;
constexpr unsigned int OUT           = 0xD3;
constexpr unsigned int CNC           = 0xD4;
constexpr unsigned int PUSH_D        = 0xD5;
constexpr unsigned int SUI           = 0xD6;
constexpr unsigned int RST_2         = 0xD7;
constexpr unsigned int RC            = 0xD8;
constexpr unsigned int UNUSED_RET_1  = 0xD9;
constexpr unsigned int JC            = 0xDA;
constexpr unsigned int IN            = 0xDB;
constexpr unsigned int CC            = 0xDC;
constexpr unsigned int UNUSED_CALL_1 = 0xDD;
constexpr unsigned int SBI           = 0xDE;
constexpr unsigned int RST_3         = 0xDF;
constexpr unsigned int RPO           = 0xE0;
constexpr unsigned int POP_H         = 0xE1;
constexpr unsigned int JPO           = 0xE2;
constexpr unsigned int XTHL          = 0xE3;
constexpr unsigned int CPO           = 0xE4;
constexpr unsigned int PUSH_H        = 0xE5;
constexpr unsigned int ANI           = 0xE6;
constexpr unsigned int RST_4         = 0xE7;
constexpr unsigned int RPE           = 0xE8;
constexpr unsigned int PCHL          = 0xE9;
constexpr unsigned int JPE           = 0xEA;
constexpr unsigned int XCHG          = 0xEB;
constexpr unsigned int CPE           = 0xEC;
constexpr unsigned int UNUSED_CALL_2 = 0xED;
constexpr unsigned int XRI           = 0xEE;
constexpr unsigned int RST_5         = 0xEF;
constexpr unsigned int RP            = 0xF0;
constexpr unsigned int POP_PSW       = 0xF1;
constexpr unsigned int JP            = 0xF2;
constexpr unsigned int DI            = 0xF3;
constexpr unsigned int CP            = 0xF4;
constexpr unsigned int PUSH_PSW      = 0xF5;
constexpr unsigned int ORI           = 0xF6;
constexpr unsigned int RST_6         = 0xF7;
constexpr unsigned int RM            = 0xF8;
constexpr unsigned int SPHL          = 0xF9;
constexpr unsigned int JM            = 0xFA;
constexpr unsigned int EI            = 0xFB;
constexpr unsigned int CM            = 0xFC;
constexpr unsigned int UNUSED_CALL_3 = 0xFD;
constexpr unsigned int CPI           = 0xFE;
constexpr unsigned int RST_7         = 0xFF;

namespace emu::i8080 {

    using emu::misc::NextByte;
    using emu::misc::NextWord;

    void aci(u8 &acc_reg, NextByte args, Flags &flag_reg, unsigned long &cycles);
    void adc(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles);
    void adc(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles, bool is_memory_involved);
    void add(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles);
    void add(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles, bool is_memory_involved);
    void adi(u8 &acc_reg, const NextByte &args, Flags &flag_reg, unsigned long &cycles);
    void ana(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles);
    void ana(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles, bool is_memory_involved);
    void ani(u8 &acc_reg, const NextByte &args, Flags &flag_reg, unsigned long &cycles);
    void call(u16 &pc, u16 &sp, EmulatorMemory &memory, const NextWord &args, unsigned long &cycles);
    void cc(u16 &pc, u16 &sp, EmulatorMemory &memory, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void cm(u16 &pc, u16 &sp, EmulatorMemory &memory, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void cma(u8 &acc_reg, unsigned long &cycles);
    void cmc(Flags &flag_reg, unsigned long &cycles);
    void cmp(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles);
    void cmp(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles, bool is_memory_involved);
    void cnc(u16 &pc, u16 &sp, EmulatorMemory &memory, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void cnz(u16 &pc, u16 &sp, EmulatorMemory &memory, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void cp(u16 &pc, u16 &sp, EmulatorMemory &memory, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void cpe(u16 &pc, u16 &sp, EmulatorMemory &memory, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void cpi(u8 &acc_reg, const NextByte &args, Flags &flag_reg, unsigned long &cycles);
    void cpo(u16 &pc, u16 &sp, EmulatorMemory &memory, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void cz(u16 &pc, u16 &sp, EmulatorMemory &memory, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void daa(u8 &acc_reg, Flags &flag_reg, unsigned long &cycles);
    void dad(u8 &h_reg, u8 &l_reg, u16 value, Flags &flag_reg, unsigned long &cycles);
    void dcr(u8 &reg, Flags &flag_reg, unsigned long &cycles);
    void dcr(u8 &reg, Flags &flag_reg, unsigned long &cycles, bool is_memory_involved);
    void dcx(u8 &reg1, u8 &reg2, unsigned long &cycles);
    void dcx_sp(u16 &sp, unsigned long &cycles);
    void di(bool &inte, unsigned long &cycles);
    void ei(bool &inte, unsigned long &cycles);
    void hlt(bool &stopped, unsigned long &cycles);
    void in(u8 &acc_reg, const NextByte &args, std::vector<u8> io, unsigned long &cycles);
    void inr(u8 &reg, Flags &flag_reg, unsigned long &cycles);
    void inr(u8 &reg, Flags &flag_reg, unsigned long &cycles, bool is_memory_involved);
    void inx(u8 &reg1, u8 &reg2, unsigned long &cycles);
    void inx_sp(u16 &sp, unsigned long &cycles);
    void jc(u16 &pc, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void jm(u16 &pc, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void jmp(u16 &pc, const NextWord &args, unsigned long &cycles);
    void jnc(u16 &pc, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void jnz(u16 &pc, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void jp(u16 &pc, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void jpe(u16 &pc, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void jpo(u16 &pc, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void jz(u16 &pc, const NextWord &args, const Flags &flag_reg, unsigned long &cycles);
    void lda(u8 &acc_reg, const EmulatorMemory &memory, const NextWord &args, unsigned long &cycles);
    void ldax(u8 &acc_reg, u8 reg1, u8 reg2, const EmulatorMemory &memory, unsigned long &cycles);
    void lhld(u8 &l_reg, u8 &h_reg, const EmulatorMemory &memory, const NextWord &args, unsigned long &cycles);
    void lxi(u8 &reg1, u8 &reg2, const NextWord &args, unsigned long &cycles);
    void lxi_sp(u16 &sp, const NextWord &args, unsigned long &cycles);
    void mov(u8 &to, u8 value, unsigned long &cycles);
    void mov(u8 &to, u8 value, unsigned long &cycles, bool is_memory_involved);
    void mvi(u8 &reg, const NextByte &args, unsigned long &cycles);
    void mvi(u8 &reg, const NextByte &args, unsigned long &cycles, bool is_memory_involved);
    void nop(unsigned long &cycles);
    void ora(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles);
    void ora(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles, bool is_memory_involved);
    void ori(u8 &acc_reg, const NextByte &args, Flags &flag_reg, unsigned long &cycles);
    void out(u8 acc_reg, const NextByte &args, std::vector<u8> &io, unsigned long &cycles);
    void pchl(u16 &pc, u16 address, unsigned long &cycles);
    void pop(u8 &reg1, u8 &reg2, u16 &sp, const EmulatorMemory &memory, unsigned long &cycles);
    void pop_psw(Flags &flag_reg, u8 &acc_reg, u16 &sp, const EmulatorMemory &memory, unsigned long &cycles);
    void push(u8 reg1, u8 reg2, u16 &sp, EmulatorMemory &memory, unsigned long &cycles);
    void push_psw(const Flags &flag_reg, u8 acc_reg, u16 &sp, EmulatorMemory &memory, unsigned long &cycles);
    void ral(u8 &acc_reg, Flags &flag_reg, unsigned long &cycles);
    void rar(u8 &acc_reg, Flags &flag_reg, unsigned long &cycles);
    void rc(u16 &pc, u16 &sp, const EmulatorMemory &memory, const Flags &flag_reg, unsigned long &cycles);
    void ret(u16 &pc, u16 &sp, const EmulatorMemory &memory, unsigned long &cycles);
    void rlc(u8 &acc_reg, Flags &flag_reg, unsigned long &cycles);
    void rm(u16 &pc, u16 &sp, EmulatorMemory &memory, const Flags &flag_reg, unsigned long &cycles);
    void rnc(u16 &pc, u16 &sp, const EmulatorMemory &memory, const Flags &flag_reg, unsigned long &cycles);
    void rnz(u16 &pc, u16 &sp, const EmulatorMemory &memory, const Flags &flag_reg, unsigned long &cycles);
    void rp(u16 &pc, u16 &sp, const EmulatorMemory &memory, const Flags &flag_reg, unsigned long &cycles);
    void rpe(u16 &pc, u16 &sp, const EmulatorMemory &memory, const Flags &flag_reg, unsigned long &cycles);
    void rpo(u16 &pc, u16 &sp, const EmulatorMemory &memory, const Flags &flag_reg, unsigned long &cycles);
    void rrc(u8 &acc_reg, Flags &flag_reg, unsigned long &cycles);
    void rst_0(u16 &pc, u16 &sp, EmulatorMemory &memory, unsigned long &cycles);
    void rst_1(u16 &pc, u16 &sp, EmulatorMemory &memory, unsigned long &cycles);
    void rst_2(u16 &pc, u16 &sp, EmulatorMemory &memory, unsigned long &cycles);
    void rst_3(u16 &pc, u16 &sp, EmulatorMemory &memory, unsigned long &cycles);
    void rst_4(u16 &pc, u16 &sp, EmulatorMemory &memory, unsigned long &cycles);
    void rst_5(u16 &pc, u16 &sp, EmulatorMemory &memory, unsigned long &cycles);
    void rst_6(u16 &pc, u16 &sp, EmulatorMemory &memory, unsigned long &cycles);
    void rst_7(u16 &pc, u16 &sp, EmulatorMemory &memory, unsigned long &cycles);
    void rz(u16 &pc, u16 &sp, const EmulatorMemory &memory, const Flags &flag_reg, unsigned long &cycles);
    void sbb(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles);
    void sbb(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles, bool is_memory_involved);
    void sbi(u8 &acc_reg, const NextByte &args, Flags &flag_reg, unsigned long &cycles);
    void shld(u8 l_reg, u8 h_reg, EmulatorMemory &memory, const NextWord &args, unsigned long &cycles);
    void sphl(u16 &sp, u16 address, unsigned long &cycles);
    void sta(u8 &acc_reg, EmulatorMemory &memory, const NextWord &args, unsigned long &cycles);
    void stax(u8 acc_reg, u8 reg1, u8 reg2, EmulatorMemory &memory, unsigned long &cycles);
    void stc(Flags &flag_reg, unsigned long &cycles);
    void sub(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles);
    void sub(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles, bool is_memory_involved);
    void sui(u8 &acc_reg, const NextByte &args, Flags &flag_reg, unsigned long &cycles);
    void unused_1(u8 opcode, unsigned long &cycles);
    void unused_3(u8 opcode, u16 &pc, unsigned long &cycles);
    void xchg(u8 &h_reg, u8 &l_reg, u8 &d_reg, u8 &e_reg, unsigned long &cycles);
    void xra(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles);
    void xra(u8 &acc_reg, u8 value, Flags &flag_reg, unsigned long &cycles, bool is_memory_involved);
    void xri(u8 &acc_reg, const NextByte &args, Flags &flag_reg, unsigned long &cycles);
    void xthl(u8 &h_reg, u8 &l_reg, u8 &sp0, u8 &sp1, unsigned long &cycles);

    void print_aci(std::ostream &ostream, const NextByte &args);
    void print_adc(std::ostream &ostream, const std::string &reg);
    void print_add(std::ostream &ostream, const std::string &reg);
    void print_adi(std::ostream &ostream, const NextByte &args);
    void print_ana(std::ostream &ostream, const std::string &reg);
    void print_ani(std::ostream &ostream, const NextByte &args);
    void print_call(std::ostream &ostream, const NextWord &args);
    void print_cc(std::ostream &ostream, const NextWord &args);
    void print_cm(std::ostream &ostream, const NextWord &args);
    void print_cma(std::ostream &ostream);
    void print_cmc(std::ostream &ostream);
    void print_cmp(std::ostream &ostream, const std::string &reg);
    void print_cnc(std::ostream &ostream, const NextWord &args);
    void print_cnz(std::ostream &ostream, const NextWord &args);
    void print_cp(std::ostream &ostream, const NextWord &args);
    void print_cpe(std::ostream &ostream, const NextWord &args);
    void print_cpi(std::ostream &ostream, const NextByte &args);
    void print_cpo(std::ostream &ostream, const NextWord &args);
    void print_cz(std::ostream &ostream, const NextWord &args);
    void print_daa(std::ostream &ostream);
    void print_dad(std::ostream &ostream, const std::string &reg);
    void print_di(std::ostream &ostream);
    void print_dcr(std::ostream &ostream, const std::string &reg);
    void print_dcx(std::ostream &ostream, const std::string &reg);
    void print_ei(std::ostream &ostream);
    void print_hlt(std::ostream &ostream);
    void print_in(std::ostream &ostream, const NextByte &args);
    void print_jc(std::ostream &ostream, const NextWord &args);
    void print_jz(std::ostream &ostream, const NextWord &args);
    void print_jm(std::ostream &ostream, const NextWord &args);
    void print_jmp(std::ostream &ostream, const NextWord &args);
    void print_jnc(std::ostream &ostream, const NextWord &args);
    void print_jnz(std::ostream &ostream, const NextWord &args);
    void print_jp(std::ostream &ostream, const NextWord &args);
    void print_jpe(std::ostream &ostream, const NextWord &args);
    void print_jpo(std::ostream &ostream, const NextWord &args);
    void print_lda(std::ostream &ostream, const NextWord &args);
    void print_ldax(std::ostream &ostream, const std::string &reg);
    void print_lhld(std::ostream &ostream, const NextWord &args);
    void print_lxi(std::ostream &ostream, const std::string &reg, const NextWord &args);
    void print_inr(std::ostream &ostream, const std::string &reg);
    void print_inx(std::ostream &ostream, const std::string &reg);
    void print_mvi(std::ostream &ostream, const std::string &reg, const NextByte &args);
    void print_mov(std::ostream &ostream, const std::string &reg1, const std::string &reg2);
    void print_nop(std::ostream &ostream);
    void print_ora(std::ostream &ostream, const std::string &reg);
    void print_ori(std::ostream &ostream, const NextByte &args);
    void print_pchl(std::ostream &ostream);
    void print_pop(std::ostream &ostream, const std::string &reg);
    void print_push(std::ostream &ostream, const std::string &reg);
    void print_out(std::ostream &ostream, const NextByte &args);
    void print_ral(std::ostream &ostream);
    void print_rar(std::ostream &ostream);
    void print_rc(std::ostream &ostream);
    void print_ret(std::ostream &ostream);
    void print_rlc(std::ostream &ostream, const std::string &reg);
    void print_rm(std::ostream &ostream);
    void print_rnc(std::ostream &ostream);
    void print_rnz(std::ostream &ostream);
    void print_rp(std::ostream &ostream);
    void print_rpe(std::ostream &ostream);
    void print_rpo(std::ostream &ostream);
    void print_rst(std::ostream &ostream, int number);
    void print_rrc(std::ostream &ostream);
    void print_rz(std::ostream &ostream);
    void print_sbb(std::ostream &ostream, const std::string &reg);
    void print_sbi(std::ostream &ostream, const NextByte &args);
    void print_shld(std::ostream &ostream, const NextWord &args);
    void print_sphl(std::ostream &ostream);
    void print_sta(std::ostream &ostream, const NextWord &args);
    void print_stax(std::ostream &ostream, const std::string &reg);
    void print_stc(std::ostream &ostream);
    void print_sub(std::ostream &ostream, const std::string &reg);
    void print_sui(std::ostream &ostream, const NextByte &args);
    void print_unused_nop(std::ostream &ostream);
    void print_unused_jmp(std::ostream &ostream, const NextWord &args);
    void print_unused_ret(std::ostream &ostream);
    void print_unused_call(std::ostream &ostream, const NextWord &args);
    void print_xchg(std::ostream &ostream);
    void print_xra(std::ostream &ostream, const std::string &reg);
    void print_xri(std::ostream &ostream, const NextByte &args);
    void print_xthl(std::ostream &ostream);
}
// @formatter:on

#endif //MIKA_EMULATORS_8080_INSTRUCTIONS_INSTRUCTIONS_H
