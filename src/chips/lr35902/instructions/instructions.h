#pragma once

#include "chips/lr35902/flags.h"
#include "chips/lr35902/interrupt_mode.h"
#include "crosscutting/memory/emulator_memory.h"
#include "crosscutting/memory/next_byte.h"
#include "crosscutting/memory/next_word.h"
#include "crosscutting/typedefs.h"
#include <string>
#include <vector>

// @formatter:off

// Main opcodes:
constexpr unsigned int NOP = 0x00;
constexpr unsigned int LD_BC_nn = 0x01;
constexpr unsigned int LD_MBC_A = 0x02;
constexpr unsigned int INC_BC = 0x03;
constexpr unsigned int INC_B = 0x04;
constexpr unsigned int DEC_B = 0x05;
constexpr unsigned int LD_B_n = 0x06;
constexpr unsigned int RLCA = 0x07;
constexpr unsigned int EX_AF_AFP = 0x08; // TODO: LD (a16),SP
constexpr unsigned int ADD_HL_BC = 0x09;
constexpr unsigned int LD_A_MBC = 0x0A;
constexpr unsigned int DEC_BC = 0x0B;
constexpr unsigned int INC_C = 0x0C;
constexpr unsigned int DEC_C = 0x0D;
constexpr unsigned int LD_C_n = 0x0E;
constexpr unsigned int RRCA = 0x0F;
constexpr unsigned int DJNZ = 0x10; // TODO: STOP 0
constexpr unsigned int LD_DE_nn = 0x11;
constexpr unsigned int LD_MDE_A = 0x12;
constexpr unsigned int INC_DE = 0x13;
constexpr unsigned int INC_D = 0x14;
constexpr unsigned int DEC_D = 0x15;
constexpr unsigned int LD_D_n = 0x16;
constexpr unsigned int RLA = 0x17;
constexpr unsigned int JR_e = 0x18;
constexpr unsigned int ADD_HL_DE = 0x19;
constexpr unsigned int LD_A_MDE = 0x1A;
constexpr unsigned int DEC_DE = 0x1B;
constexpr unsigned int INC_E = 0x1C;
constexpr unsigned int DEC_E = 0x1D;
constexpr unsigned int LD_E_n = 0x1E;
constexpr unsigned int RRA = 0x1F;
constexpr unsigned int JR_NZ_e = 0x20;
constexpr unsigned int LD_HL_nn = 0x21;
constexpr unsigned int LD_Mnn_HL = 0x22; // TODO: LD (HL+),A
constexpr unsigned int INC_HL = 0x23;
constexpr unsigned int INC_H = 0x24;
constexpr unsigned int DEC_H = 0x25;
constexpr unsigned int LD_H_n = 0x26;
constexpr unsigned int DAA = 0x27;
constexpr unsigned int JR_Z_e = 0x28;
constexpr unsigned int ADD_HL_HL = 0x29;
constexpr unsigned int LD_HL_Mnn = 0x2A; // TODO: LD A,(HL+)
constexpr unsigned int DEC_HL = 0x2B;
constexpr unsigned int INC_L = 0x2C;
constexpr unsigned int DEC_L = 0x2D;
constexpr unsigned int LD_L_n = 0x2E;
constexpr unsigned int CPL = 0x2F;
constexpr unsigned int JR_NC_e = 0x30;
constexpr unsigned int LD_SP_nn = 0x31;
constexpr unsigned int LD_Mnn_A = 0x32; // TODO: LD (HL-),A
constexpr unsigned int INC_SP = 0x33;
constexpr unsigned int INC_MHL = 0x34;
constexpr unsigned int DEC_MHL = 0x35;
constexpr unsigned int LD_MHL_n = 0x36;
constexpr unsigned int SCF = 0x37;
constexpr unsigned int JR_C_e = 0x38;
constexpr unsigned int ADD_HL_SP = 0x39;
constexpr unsigned int LD_A_Mnn = 0x3A; // TODO: LD A,(HL-)
constexpr unsigned int DEC_SP = 0x3B;
constexpr unsigned int INC_A = 0x3C;
constexpr unsigned int DEC_A = 0x3D;
constexpr unsigned int LD_A_n = 0x3E;
constexpr unsigned int CCF = 0x3F;
constexpr unsigned int LD_B_B = 0x40;
constexpr unsigned int LD_B_C = 0x41;
constexpr unsigned int LD_B_D = 0x42;
constexpr unsigned int LD_B_E = 0x43;
constexpr unsigned int LD_B_H = 0x44;
constexpr unsigned int LD_B_L = 0x45;
constexpr unsigned int LD_B_MHL = 0x46;
constexpr unsigned int LD_B_A = 0x47;
constexpr unsigned int LD_C_B = 0x48;
constexpr unsigned int LD_C_C = 0x49;
constexpr unsigned int LD_C_D = 0x4A;
constexpr unsigned int LD_C_E = 0x4B;
constexpr unsigned int LD_C_H = 0x4C;
constexpr unsigned int LD_C_L = 0x4D;
constexpr unsigned int LD_C_MHL = 0x4E;
constexpr unsigned int LD_C_A = 0x4F;
constexpr unsigned int LD_D_B = 0x50;
constexpr unsigned int LD_D_C = 0x51;
constexpr unsigned int LD_D_D = 0x52;
constexpr unsigned int LD_D_E = 0x53;
constexpr unsigned int LD_D_H = 0x54;
constexpr unsigned int LD_D_L = 0x55;
constexpr unsigned int LD_D_MHL = 0x56;
constexpr unsigned int LD_D_A = 0x57;
constexpr unsigned int LD_E_B = 0x58;
constexpr unsigned int LD_E_C = 0x59;
constexpr unsigned int LD_E_D = 0x5A;
constexpr unsigned int LD_E_E = 0x5B;
constexpr unsigned int LD_E_H = 0x5C;
constexpr unsigned int LD_E_L = 0x5D;
constexpr unsigned int LD_E_MHL = 0x5E;
constexpr unsigned int LD_E_A = 0x5F;
constexpr unsigned int LD_H_B = 0x60;
constexpr unsigned int LD_H_C = 0x61;
constexpr unsigned int LD_H_D = 0x62;
constexpr unsigned int LD_H_E = 0x63;
constexpr unsigned int LD_H_H = 0x64;
constexpr unsigned int LD_H_L = 0x65;
constexpr unsigned int LD_H_MHL = 0x66;
constexpr unsigned int LD_H_A = 0x67;
constexpr unsigned int LD_L_B = 0x68;
constexpr unsigned int LD_L_C = 0x69;
constexpr unsigned int LD_L_D = 0x6A;
constexpr unsigned int LD_L_E = 0x6B;
constexpr unsigned int LD_L_H = 0x6C;
constexpr unsigned int LD_L_L = 0x6D;
constexpr unsigned int LD_L_MHL = 0x6E;
constexpr unsigned int LD_L_A = 0x6F;
constexpr unsigned int LD_MHL_B = 0x70;
constexpr unsigned int LD_MHL_C = 0x71;
constexpr unsigned int LD_MHL_D = 0x72;
constexpr unsigned int LD_MHL_E = 0x73;
constexpr unsigned int LD_MHL_H = 0x74;
constexpr unsigned int LD_MHL_L = 0x75;
constexpr unsigned int HALT = 0x76;
constexpr unsigned int LD_MHL_A = 0x77;
constexpr unsigned int LD_A_B = 0x78;
constexpr unsigned int LD_A_C = 0x79;
constexpr unsigned int LD_A_D = 0x7A;
constexpr unsigned int LD_A_E = 0x7B;
constexpr unsigned int LD_A_H = 0x7C;
constexpr unsigned int LD_A_L = 0x7D;
constexpr unsigned int LD_A_MHL = 0x7E;
constexpr unsigned int LD_A_A = 0x7F;
constexpr unsigned int ADD_A_B = 0x80;
constexpr unsigned int ADD_A_C = 0x81;
constexpr unsigned int ADD_A_D = 0x82;
constexpr unsigned int ADD_A_E = 0x83;
constexpr unsigned int ADD_A_H = 0x84;
constexpr unsigned int ADD_A_L = 0x85;
constexpr unsigned int ADD_A_MHL = 0x86;
constexpr unsigned int ADD_A_A = 0x87;
constexpr unsigned int ADC_A_B = 0x88;
constexpr unsigned int ADC_A_C = 0x89;
constexpr unsigned int ADC_A_D = 0x8A;
constexpr unsigned int ADC_A_E = 0x8B;
constexpr unsigned int ADC_A_H = 0x8C;
constexpr unsigned int ADC_A_L = 0x8D;
constexpr unsigned int ADC_A_MHL = 0x8E;
constexpr unsigned int ADC_A_A = 0x8F;
constexpr unsigned int SUB_B = 0x90;
constexpr unsigned int SUB_C = 0x91;
constexpr unsigned int SUB_D = 0x92;
constexpr unsigned int SUB_E = 0x93;
constexpr unsigned int SUB_H = 0x94;
constexpr unsigned int SUB_L = 0x95;
constexpr unsigned int SUB_MHL = 0x96;
constexpr unsigned int SUB_A = 0x97;
constexpr unsigned int SBC_A_B = 0x98;
constexpr unsigned int SBC_A_C = 0x99;
constexpr unsigned int SBC_A_D = 0x9A;
constexpr unsigned int SBC_A_E = 0x9B;
constexpr unsigned int SBC_A_H = 0x9C;
constexpr unsigned int SBC_A_L = 0x9D;
constexpr unsigned int SBC_A_MHL = 0x9E;
constexpr unsigned int SBC_A_A = 0x9F;
constexpr unsigned int AND_B = 0xA0;
constexpr unsigned int AND_C = 0xA1;
constexpr unsigned int AND_D = 0xA2;
constexpr unsigned int AND_E = 0xA3;
constexpr unsigned int AND_H = 0xA4;
constexpr unsigned int AND_L = 0xA5;
constexpr unsigned int AND_MHL = 0xA6;
constexpr unsigned int AND_A = 0xA7;
constexpr unsigned int XOR_B = 0xA8;
constexpr unsigned int XOR_C = 0xA9;
constexpr unsigned int XOR_D = 0xAA;
constexpr unsigned int XOR_E = 0xAB;
constexpr unsigned int XOR_H = 0xAC;
constexpr unsigned int XOR_L = 0xAD;
constexpr unsigned int XOR_MHL = 0xAE;
constexpr unsigned int XOR_A = 0xAF;
constexpr unsigned int OR_B = 0xB0;
constexpr unsigned int OR_C = 0xB1;
constexpr unsigned int OR_D = 0xB2;
constexpr unsigned int OR_E = 0xB3;
constexpr unsigned int OR_H = 0xB4;
constexpr unsigned int OR_L = 0xB5;
constexpr unsigned int OR_MHL = 0xB6;
constexpr unsigned int OR_A = 0xB7;
constexpr unsigned int CP_B = 0xB8;
constexpr unsigned int CP_C = 0xB9;
constexpr unsigned int CP_D = 0xBA;
constexpr unsigned int CP_E = 0xBB;
constexpr unsigned int CP_H = 0xBC;
constexpr unsigned int CP_L = 0xBD;
constexpr unsigned int CP_MHL = 0xBE;
constexpr unsigned int CP_A = 0xBF;
constexpr unsigned int RET_NZ = 0xC0;
constexpr unsigned int POP_BC = 0xC1;
constexpr unsigned int JP_NZ = 0xC2;
constexpr unsigned int JP = 0xC3;
constexpr unsigned int CALL_NZ = 0xC4;
constexpr unsigned int PUSH_BC = 0xC5;
constexpr unsigned int ADD_A_n = 0xC6;
constexpr unsigned int RST_0 = 0xC7;
constexpr unsigned int RET_Z = 0xC8;
constexpr unsigned int RET = 0xC9;
constexpr unsigned int JP_Z = 0xCA;
constexpr unsigned int BITS = 0xCB; // TODO: PREFIX CB
constexpr unsigned int CALL_Z = 0xCC;
constexpr unsigned int CALL = 0xCD;
constexpr unsigned int ADC_A_n = 0xCE;
constexpr unsigned int RST_1 = 0xCF;
constexpr unsigned int RET_NC = 0xD0;
constexpr unsigned int POP_DE = 0xD1;
constexpr unsigned int JP_NC = 0xD2;
constexpr unsigned int OUT = 0xD3;  // TODO: nothing
constexpr unsigned int CALL_NC = 0xD4;
constexpr unsigned int PUSH_DE = 0xD5;
constexpr unsigned int SUB_n = 0xD6;
constexpr unsigned int RST_2 = 0xD7;
constexpr unsigned int RET_C = 0xD8;
constexpr unsigned int EXX = 0xD9;
constexpr unsigned int JP_C = 0xDA;
constexpr unsigned int IN = 0xDB; // TODO: nothing
constexpr unsigned int CALL_C = 0xDC;
constexpr unsigned int IX = 0xDD; // TODO: nothing
constexpr unsigned int SBC_A_n = 0xDE;
constexpr unsigned int RST_3 = 0xDF;
constexpr unsigned int RET_PO = 0xE0; // TODO: LDH (a8),A
constexpr unsigned int POP_HL = 0xE1;
constexpr unsigned int JP_PO = 0xE2; // TODO: LD (C),A
constexpr unsigned int EX_MSP_HL = 0xE3; // TODO: nothing
constexpr unsigned int CALL_PO = 0xE4; // TODO: nothing
constexpr unsigned int PUSH_HL = 0xE5;
constexpr unsigned int AND_n = 0xE6;
constexpr unsigned int RST_4 = 0xE7;
constexpr unsigned int RET_PE = 0xE8; // TODO: ADD SP,r8
constexpr unsigned int JP_MHL = 0xE9;
constexpr unsigned int JP_PE = 0xEA; // TODO: LD (a16),A
constexpr unsigned int EX_DE_HL = 0xEB; // TODO: nothing
constexpr unsigned int CALL_PE = 0xEC; // TODO: nothing
constexpr unsigned int EXTD = 0xED; // TODO: nothing
constexpr unsigned int XOR_n = 0xEE;
constexpr unsigned int RST_5 = 0xEF;
constexpr unsigned int RET_P = 0xF0; // TODO: LDH A,(a8)
constexpr unsigned int POP_AF = 0xF1;
constexpr unsigned int JP_P = 0xF2; // TODO: LD A,(C)
constexpr unsigned int DI = 0xF3;
constexpr unsigned int CALL_P = 0xF4; // TODO: nothing
constexpr unsigned int PUSH_AF = 0xF5;
constexpr unsigned int OR_n = 0xF6;
constexpr unsigned int RST_6 = 0xF7;
constexpr unsigned int RET_M = 0xF8; // TODO: LD HL,SP+r8
constexpr unsigned int LD_SP_HL = 0xF9;
constexpr unsigned int JP_M = 0xFA; // TODO: LD A,(a16)
constexpr unsigned int EI = 0xFB;
constexpr unsigned int CALL_M = 0xFC; // TODO: nothing
constexpr unsigned int IY = 0xFD; // TODO: nothing
constexpr unsigned int CP_n = 0xFE;
constexpr unsigned int RST_7 = 0xFF;

// BITS opcodes:
constexpr unsigned int RLC_B = 0x00;
constexpr unsigned int RLC_C = 0x01;
constexpr unsigned int RLC_D = 0x02;
constexpr unsigned int RLC_E = 0x03;
constexpr unsigned int RLC_H = 0x04;
constexpr unsigned int RLC_L = 0x05;
constexpr unsigned int RLC_MHL = 0x06;
constexpr unsigned int RLC_A = 0x07;
constexpr unsigned int RRC_B = 0x08;
constexpr unsigned int RRC_C = 0x09;
constexpr unsigned int RRC_D = 0x0A;
constexpr unsigned int RRC_E = 0x0B;
constexpr unsigned int RRC_H = 0x0C;
constexpr unsigned int RRC_L = 0x0D;
constexpr unsigned int RRC_MHL = 0x0E;
constexpr unsigned int RRC_A = 0x0F;
constexpr unsigned int RL_B = 0x10;
constexpr unsigned int RL_C = 0x11;
constexpr unsigned int RL_D = 0x12;
constexpr unsigned int RL_E = 0x13;
constexpr unsigned int RL_H = 0x14;
constexpr unsigned int RL_L = 0x15;
constexpr unsigned int RL_MHL = 0x16;
constexpr unsigned int RL_A = 0x17;
constexpr unsigned int RR_B = 0x18;
constexpr unsigned int RR_C = 0x19;
constexpr unsigned int RR_D = 0x1A;
constexpr unsigned int RR_E = 0x1B;
constexpr unsigned int RR_H = 0x1C;
constexpr unsigned int RR_L = 0x1D;
constexpr unsigned int RR_MHL = 0x1E;
constexpr unsigned int RR_A = 0x1F;
constexpr unsigned int SLA_B = 0x20;
constexpr unsigned int SLA_C = 0x21;
constexpr unsigned int SLA_D = 0x22;
constexpr unsigned int SLA_E = 0x23;
constexpr unsigned int SLA_H = 0x24;
constexpr unsigned int SLA_L = 0x25;
constexpr unsigned int SLA_MHL = 0x26;
constexpr unsigned int SLA_A = 0x27;
constexpr unsigned int SRA_B = 0x28;
constexpr unsigned int SRA_C = 0x29;
constexpr unsigned int SRA_D = 0x2A;
constexpr unsigned int SRA_E = 0x2B;
constexpr unsigned int SRA_H = 0x2C;
constexpr unsigned int SRA_L = 0x2D;
constexpr unsigned int SRA_MHL = 0x2E;
constexpr unsigned int SRA_A = 0x2F;
constexpr unsigned int SLL_B_UNDOC = 0x30; // TODO: SWAP B
constexpr unsigned int SLL_C_UNDOC = 0x31; // TODO: SWAP C
constexpr unsigned int SLL_D_UNDOC = 0x32; // TODO: SWAP D
constexpr unsigned int SLL_E_UNDOC = 0x33; // TODO: SWAP E
constexpr unsigned int SLL_H_UNDOC = 0x34; // TODO: SWAP H
constexpr unsigned int SLL_L_UNDOC = 0x35; // TODO: SWAP L
constexpr unsigned int SLL_MHL_UNDOC = 0x36; // TODO: SWAP (HL)
constexpr unsigned int SLL_A_UNDOC = 0x37; // TODO: SWAP A
constexpr unsigned int SRL_B = 0x38;
constexpr unsigned int SRL_C = 0x39;
constexpr unsigned int SRL_D = 0x3A;
constexpr unsigned int SRL_E = 0x3B;
constexpr unsigned int SRL_H = 0x3C;
constexpr unsigned int SRL_L = 0x3D;
constexpr unsigned int SRL_MHL = 0x3E;
constexpr unsigned int SRL_A = 0x3F;
constexpr unsigned int BIT_0_B = 0x40;
constexpr unsigned int BIT_0_C = 0x41;
constexpr unsigned int BIT_0_D = 0x42;
constexpr unsigned int BIT_0_E = 0x43;
constexpr unsigned int BIT_0_H = 0x44;
constexpr unsigned int BIT_0_L = 0x45;
constexpr unsigned int BIT_0_MHL = 0x46;
constexpr unsigned int BIT_0_A = 0x47;
constexpr unsigned int BIT_1_B = 0x48;
constexpr unsigned int BIT_1_C = 0x49;
constexpr unsigned int BIT_1_D = 0x4A;
constexpr unsigned int BIT_1_E = 0x4B;
constexpr unsigned int BIT_1_H = 0x4C;
constexpr unsigned int BIT_1_L = 0x4D;
constexpr unsigned int BIT_1_MHL = 0x4E;
constexpr unsigned int BIT_1_A = 0x4F;
constexpr unsigned int BIT_2_B = 0x50;
constexpr unsigned int BIT_2_C = 0x51;
constexpr unsigned int BIT_2_D = 0x52;
constexpr unsigned int BIT_2_E = 0x53;
constexpr unsigned int BIT_2_H = 0x54;
constexpr unsigned int BIT_2_L = 0x55;
constexpr unsigned int BIT_2_MHL = 0x56;
constexpr unsigned int BIT_2_A = 0x57;
constexpr unsigned int BIT_3_B = 0x58;
constexpr unsigned int BIT_3_C = 0x59;
constexpr unsigned int BIT_3_D = 0x5A;
constexpr unsigned int BIT_3_E = 0x5B;
constexpr unsigned int BIT_3_H = 0x5C;
constexpr unsigned int BIT_3_L = 0x5D;
constexpr unsigned int BIT_3_MHL = 0x5E;
constexpr unsigned int BIT_3_A = 0x5F;
constexpr unsigned int BIT_4_B = 0x60;
constexpr unsigned int BIT_4_C = 0x61;
constexpr unsigned int BIT_4_D = 0x62;
constexpr unsigned int BIT_4_E = 0x63;
constexpr unsigned int BIT_4_H = 0x64;
constexpr unsigned int BIT_4_L = 0x65;
constexpr unsigned int BIT_4_MHL = 0x66;
constexpr unsigned int BIT_4_A = 0x67;
constexpr unsigned int BIT_5_B = 0x68;
constexpr unsigned int BIT_5_C = 0x69;
constexpr unsigned int BIT_5_D = 0x6A;
constexpr unsigned int BIT_5_E = 0x6B;
constexpr unsigned int BIT_5_H = 0x6C;
constexpr unsigned int BIT_5_L = 0x6D;
constexpr unsigned int BIT_5_MHL = 0x6E;
constexpr unsigned int BIT_5_A = 0x6F;
constexpr unsigned int BIT_6_B = 0x70;
constexpr unsigned int BIT_6_C = 0x71;
constexpr unsigned int BIT_6_D = 0x72;
constexpr unsigned int BIT_6_E = 0x73;
constexpr unsigned int BIT_6_H = 0x74;
constexpr unsigned int BIT_6_L = 0x75;
constexpr unsigned int BIT_6_MHL = 0x76;
constexpr unsigned int BIT_6_A = 0x77;
constexpr unsigned int BIT_7_B = 0x78;
constexpr unsigned int BIT_7_C = 0x79;
constexpr unsigned int BIT_7_D = 0x7A;
constexpr unsigned int BIT_7_E = 0x7B;
constexpr unsigned int BIT_7_H = 0x7C;
constexpr unsigned int BIT_7_L = 0x7D;
constexpr unsigned int BIT_7_MHL = 0x7E;
constexpr unsigned int BIT_7_A = 0x7F;
constexpr unsigned int RES_0_B = 0x80;
constexpr unsigned int RES_0_C = 0x81;
constexpr unsigned int RES_0_D = 0x82;
constexpr unsigned int RES_0_E = 0x83;
constexpr unsigned int RES_0_H = 0x84;
constexpr unsigned int RES_0_L = 0x85;
constexpr unsigned int RES_0_MHL = 0x86;
constexpr unsigned int RES_0_A = 0x87;
constexpr unsigned int RES_1_B = 0x88;
constexpr unsigned int RES_1_C = 0x89;
constexpr unsigned int RES_1_D = 0x8A;
constexpr unsigned int RES_1_E = 0x8B;
constexpr unsigned int RES_1_H = 0x8C;
constexpr unsigned int RES_1_L = 0x8D;
constexpr unsigned int RES_1_MHL = 0x8E;
constexpr unsigned int RES_1_A = 0x8F;
constexpr unsigned int RES_2_B = 0x90;
constexpr unsigned int RES_2_C = 0x91;
constexpr unsigned int RES_2_D = 0x92;
constexpr unsigned int RES_2_E = 0x93;
constexpr unsigned int RES_2_H = 0x94;
constexpr unsigned int RES_2_L = 0x95;
constexpr unsigned int RES_2_MHL = 0x96;
constexpr unsigned int RES_2_A = 0x97;
constexpr unsigned int RES_3_B = 0x98;
constexpr unsigned int RES_3_C = 0x99;
constexpr unsigned int RES_3_D = 0x9A;
constexpr unsigned int RES_3_E = 0x9B;
constexpr unsigned int RES_3_H = 0x9C;
constexpr unsigned int RES_3_L = 0x9D;
constexpr unsigned int RES_3_MHL = 0x9E;
constexpr unsigned int RES_3_A = 0x9F;
constexpr unsigned int RES_4_B = 0xA0;
constexpr unsigned int RES_4_C = 0xA1;
constexpr unsigned int RES_4_D = 0xA2;
constexpr unsigned int RES_4_E = 0xA3;
constexpr unsigned int RES_4_H = 0xA4;
constexpr unsigned int RES_4_L = 0xA5;
constexpr unsigned int RES_4_MHL = 0xA6;
constexpr unsigned int RES_4_A = 0xA7;
constexpr unsigned int RES_5_B = 0xA8;
constexpr unsigned int RES_5_C = 0xA9;
constexpr unsigned int RES_5_D = 0xAA;
constexpr unsigned int RES_5_E = 0xAB;
constexpr unsigned int RES_5_H = 0xAC;
constexpr unsigned int RES_5_L = 0xAD;
constexpr unsigned int RES_5_MHL = 0xAE;
constexpr unsigned int RES_5_A = 0xAF;
constexpr unsigned int RES_6_B = 0xB0;
constexpr unsigned int RES_6_C = 0xB1;
constexpr unsigned int RES_6_D = 0xB2;
constexpr unsigned int RES_6_E = 0xB3;
constexpr unsigned int RES_6_H = 0xB4;
constexpr unsigned int RES_6_L = 0xB5;
constexpr unsigned int RES_6_MHL = 0xB6;
constexpr unsigned int RES_6_A = 0xB7;
constexpr unsigned int RES_7_B = 0xB8;
constexpr unsigned int RES_7_C = 0xB9;
constexpr unsigned int RES_7_D = 0xBA;
constexpr unsigned int RES_7_E = 0xBB;
constexpr unsigned int RES_7_H = 0xBC;
constexpr unsigned int RES_7_L = 0xBD;
constexpr unsigned int RES_7_MHL = 0xBE;
constexpr unsigned int RES_7_A = 0xBF;
constexpr unsigned int SET_0_B = 0xC0;
constexpr unsigned int SET_0_C = 0xC1;
constexpr unsigned int SET_0_D = 0xC2;
constexpr unsigned int SET_0_E = 0xC3;
constexpr unsigned int SET_0_H = 0xC4;
constexpr unsigned int SET_0_L = 0xC5;
constexpr unsigned int SET_0_MHL = 0xC6;
constexpr unsigned int SET_0_A = 0xC7;
constexpr unsigned int SET_1_B = 0xC8;
constexpr unsigned int SET_1_C = 0xC9;
constexpr unsigned int SET_1_D = 0xCA;
constexpr unsigned int SET_1_E = 0xCB;
constexpr unsigned int SET_1_H = 0xCC;
constexpr unsigned int SET_1_L = 0xCD;
constexpr unsigned int SET_1_MHL = 0xCE;
constexpr unsigned int SET_1_A = 0xCF;
constexpr unsigned int SET_2_B = 0xD0;
constexpr unsigned int SET_2_C = 0xD1;
constexpr unsigned int SET_2_D = 0xD2;
constexpr unsigned int SET_2_E = 0xD3;
constexpr unsigned int SET_2_H = 0xD4;
constexpr unsigned int SET_2_L = 0xD5;
constexpr unsigned int SET_2_MHL = 0xD6;
constexpr unsigned int SET_2_A = 0xD7;
constexpr unsigned int SET_3_B = 0xD8;
constexpr unsigned int SET_3_C = 0xD9;
constexpr unsigned int SET_3_D = 0xDA;
constexpr unsigned int SET_3_E = 0xDB;
constexpr unsigned int SET_3_H = 0xDC;
constexpr unsigned int SET_3_L = 0xDD;
constexpr unsigned int SET_3_MHL = 0xDE;
constexpr unsigned int SET_3_A = 0xDF;
constexpr unsigned int SET_4_B = 0xE0;
constexpr unsigned int SET_4_C = 0xE1;
constexpr unsigned int SET_4_D = 0xE2;
constexpr unsigned int SET_4_E = 0xE3;
constexpr unsigned int SET_4_H = 0xE4;
constexpr unsigned int SET_4_L = 0xE5;
constexpr unsigned int SET_4_MHL = 0xE6;
constexpr unsigned int SET_4_A = 0xE7;
constexpr unsigned int SET_5_B = 0xE8;
constexpr unsigned int SET_5_C = 0xE9;
constexpr unsigned int SET_5_D = 0xEA;
constexpr unsigned int SET_5_E = 0xEB;
constexpr unsigned int SET_5_H = 0xEC;
constexpr unsigned int SET_5_L = 0xED;
constexpr unsigned int SET_5_MHL = 0xEE;
constexpr unsigned int SET_5_A = 0xEF;
constexpr unsigned int SET_6_B = 0xF0;
constexpr unsigned int SET_6_C = 0xF1;
constexpr unsigned int SET_6_D = 0xF2;
constexpr unsigned int SET_6_E = 0xF3;
constexpr unsigned int SET_6_H = 0xF4;
constexpr unsigned int SET_6_L = 0xF5;
constexpr unsigned int SET_6_MHL = 0xF6;
constexpr unsigned int SET_6_A = 0xF7;
constexpr unsigned int SET_7_B = 0xF8;
constexpr unsigned int SET_7_C = 0xF9;
constexpr unsigned int SET_7_D = 0xFA;
constexpr unsigned int SET_7_E = 0xFB;
constexpr unsigned int SET_7_H = 0xFC;
constexpr unsigned int SET_7_L = 0xFD;
constexpr unsigned int SET_7_MHL = 0xFE;
constexpr unsigned int SET_7_A = 0xFF;

namespace emu::lr35902 {

using emu::memory::EmulatorMemory;
using emu::memory::NextByte;
using emu::memory::NextWord;

void adc_A_r(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void adc_A_n(u8& acc_reg, NextByte args, Flags& flag_reg, cyc& cycles);
void adc_A_MHL(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void add_A_MHL(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void add_A_n(u8& acc_reg, NextByte const& args, Flags& flag_reg, cyc& cycles);
void add_A_r(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void add_HL_ss(u8& h_reg, u8& l_reg, u16 value, Flags& flag_reg, cyc& cycles);
void and_MHL(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void and_n(u8& acc_reg, NextByte const& args, Flags& flag_reg, cyc& cycles);
void and_r(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void bit_r(unsigned int bit_number, u8 reg, Flags& flag_reg, cyc& cycles);
void bit_MHL(unsigned int bit_number, u16 hl_reg, EmulatorMemory<u16, u8> const& memory, Flags& flag_reg, cyc& cycles);
void call(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, NextWord const& args, cyc& cycles);
void call_nz(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, NextWord const& args, Flags const& flag_reg, cyc& cycles);
void call_z(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, NextWord const& args, Flags const& flag_reg, cyc& cycles);
void call_nc(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, NextWord const& args, Flags const& flag_reg, cyc& cycles);
void call_c(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, NextWord const& args, Flags const& flag_reg, cyc& cycles);
void ccf(Flags& flag_reg, cyc& cycles);
void cpi(u8& b_reg, u8& c_reg, u8& h_reg, u8& l_reg, u8 acc_reg, EmulatorMemory<u16, u8> const& memory, Flags& flag_reg, cyc& cycles);
void cp_r(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void cp_n(u8& acc_reg, NextByte const& args, Flags& flag_reg, cyc& cycles);
void cp_MHL(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void cpl(u8& acc_reg, Flags& flag_reg, cyc& cycles);
void daa(u8& acc_reg, Flags& flag_reg, cyc& cycles);
void dec_r(u8& reg, Flags& flag_reg, cyc& cycles);
void dec_ss(u8& reg1, u8& reg2, cyc& cycles);
void dec_sp(u16& sp, cyc& cycles);
void dec_MHL(EmulatorMemory<u16, u8>& memory, u16 address, Flags& flag_reg, cyc& cycles);
void di(bool& iff1, bool& iff2, cyc& cycles);
void djnz(u8& b_reg, u16& pc, NextByte const& args, cyc& cycles);
void ei(bool& iff1, bool& iff2, cyc& cycles);
void halt(bool& is_halted, cyc& cycles);
void im(InterruptMode& interrupt_mode, InterruptMode value, cyc& cycles);
void inc_r(u8& reg, Flags& flag_reg, cyc& cycles);
void inc_ss(u8& reg1, u8& reg2, cyc& cycles);
void inc_MHL(EmulatorMemory<u16, u8>& memory, u16 address, Flags& flag_reg, cyc& cycles);
void inc_sp(u16& sp, cyc& cycles);
void jp(u16& pc, NextWord const& args, cyc& cycles);
void jp_nz(u16& pc, NextWord const& args, Flags const& flag_reg, cyc& cycles);
void jp_z(u16& pc, NextWord const& args, Flags const& flag_reg, cyc& cycles);
void jp_nc(u16& pc, NextWord const& args, Flags const& flag_reg, cyc& cycles);
void jp_c(u16& pc, NextWord const& args, Flags const& flag_reg, cyc& cycles);
void jp_hl(u16& pc, u16 address, cyc& cycles);
void jr(u16& pc, NextByte const& args, cyc& cycles);
void jr_c(u16& pc, NextByte const& args, Flags const& flag_reg, cyc& cycles);
void jr_nc(u16& pc, NextByte const& args, Flags const& flag_reg, cyc& cycles);
void jr_nz(u16& pc, NextByte const& args, Flags const& flag_reg, cyc& cycles);
void jr_z(u16& pc, NextByte const& args, Flags const& flag_reg, cyc& cycles);
void ld_r_n(u8& reg, NextByte const& args, cyc& cycles);
void ld_r_n_undoc(u8& to, NextByte const& args, cyc& cycles);
void ld_r_r(u8& to, u8 value, cyc& cycles);
void ld_r_r_undoc(u8& to, u8 value, cyc& cycles);
void ld_r_MHL(u8& reg, u8 value, cyc& cycles);
void ld_A_I(u8& acc_reg, u8 i_reg, Flags& flag_reg, bool iff2, cyc& cycles);
void ld_A_Mss(u8& to, u8 value, cyc& cycles);
void ld_A_Mnn(u8& reg, EmulatorMemory<u16, u8> const& memory, NextWord const& args, cyc& cycles);
void ld_I_A(u8& i_reg, u8 acc_reg, cyc& cycles);
void ld_R_A(u8& r_reg, u8 acc_reg, cyc& cycles);
void ld_A_R(u8& acc_reg, u8 r_reg, Flags& flag_reg, bool iff2, cyc& cycles);
void ld_HL_Mnn(u8& h_reg, u8& l_reg, EmulatorMemory<u16, u8> const& memory, NextWord const& args, cyc& cycles);
void ld_dd_nn(u8& reg1, u8& reg2, NextWord const& args, cyc& cycles);
void ld_ixy_nn(u16& ixy_reg, NextWord const& args, cyc& cycles);
void ld_dd_Mnn(u8& reg1, u8& reg2, NextWord const& args, EmulatorMemory<u16, u8> const& memory, cyc& cycles);
void ld_MHL_n(EmulatorMemory<u16, u8>& memory, u16 address, NextByte const& args, cyc& cycles);
void ld_MHL_r(EmulatorMemory<u16, u8>& memory, u16 address, u8 value, cyc& cycles);
void ld_Mnn_A(u8& acc_reg, EmulatorMemory<u16, u8>& memory, NextWord const& args, cyc& cycles);
void ld_Mnn_HL(u8 h_reg, u8 l_reg, EmulatorMemory<u16, u8>& memory, NextWord const& args, cyc& cycles);
void ld_Mnn_dd(u8 hi_reg, u8 lo_reg, EmulatorMemory<u16, u8>& memory, NextWord const& args, cyc& cycles);
void ld_Mnn_sp(u16 sp, EmulatorMemory<u16, u8>& memory, NextWord const& args, cyc& cycles);
void ld_Mss_A(EmulatorMemory<u16, u8>& memory, u16 address, u8 acc_reg, cyc& cycles);
void ld_sp_Mnn(u16& sp, EmulatorMemory<u16, u8> const& memory, NextWord const& args, cyc& cycles);
void ld_sp_nn(u16& sp, NextWord const& args, cyc& cycles);
void ld_sp_hl(u16& sp, u16 address, cyc& cycles);
void ldd(u8& b_reg, u8& c_reg, u8& d_reg, u8& e_reg, u8& h_reg, u8& l_reg, u8 acc_reg, EmulatorMemory<u16, u8>& memory, Flags& flag_reg, cyc& cycles);
void lddr(u16& pc, u8& b_reg, u8& c_reg, u8& d_reg, u8& e_reg, u8& h_reg, u8& l_reg, u8 acc_reg, EmulatorMemory<u16, u8>& memory, Flags& flag_reg, cyc& cycles);
void ldi(u8& b_reg, u8& c_reg, u8& d_reg, u8& e_reg, u8& h_reg, u8& l_reg, u8 acc_reg, EmulatorMemory<u16, u8>& memory, Flags& flag_reg, cyc& cycles);
void ldir(u16& pc, u8& b_reg, u8& c_reg, u8& d_reg, u8& e_reg, u8& h_reg, u8& l_reg, u8 acc_reg, EmulatorMemory<u16, u8>& memory, Flags& flag_reg, cyc& cycles);
void neg(u8& acc_reg, Flags& flag_reg, cyc& cycles);
void nmi(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void nop(cyc& cycles);
void or_r(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void or_r_undoc(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void or_n(u8& acc_reg, NextByte const& args, Flags& flag_reg, cyc& cycles);
void or_MHL(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void pop(u8& reg1, u8& reg2, u16& sp, EmulatorMemory<u16, u8> const& memory, cyc& cycles);
void pop_af(Flags& flag_reg, u8& acc_reg, u16& sp, EmulatorMemory<u16, u8> const& memory, cyc& cycles);
void push_qq(u8 reg1, u8 reg2, u16& sp, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void push_af(Flags const& flag_reg, u8 acc_reg, u16& sp, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void res_r(unsigned int bit_number, u8& reg, cyc& cycles);
void res_MHL(unsigned int bit_number, u16 hl_reg, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void ret(u16& pc, u16& sp, EmulatorMemory<u16, u8> const& memory, cyc& cycles);
void ret_c(u16& pc, u16& sp, EmulatorMemory<u16, u8> const& memory, Flags const& flag_reg, cyc& cycles);
void ret_nc(u16& pc, u16& sp, EmulatorMemory<u16, u8> const& memory, Flags const& flag_reg, cyc& cycles);
void ret_nz(u16& pc, u16& sp, EmulatorMemory<u16, u8> const& memory, Flags const& flag_reg, cyc& cycles);
void ret_z(u16& pc, u16& sp, EmulatorMemory<u16, u8> const& memory, Flags const& flag_reg, cyc& cycles);
void reti(u16& pc, u16& sp, EmulatorMemory<u16, u8> const& memory, cyc& cycles);
void retn(u16& pc, u16& sp, EmulatorMemory<u16, u8> const& memory, bool& iff1, bool iff2, cyc& cycles);
void rla(u8& acc_reg, Flags& flag_reg, cyc& cycles);
void rl_r(u8& reg, Flags& flag_reg, cyc& cycles);
void rl_MHL(EmulatorMemory<u16, u8>& memory, u16 address, Flags& flag_reg, cyc& cycles);
void rlca(u8& acc_reg, Flags& flag_reg, cyc& cycles);
void rlc_r(u8& reg, Flags& flag_reg, cyc& cycles);
void rlc_MHL(EmulatorMemory<u16, u8>& memory, u16 address, Flags& flag_reg, cyc& cycles);
void rld(u8& acc_reg, EmulatorMemory<u16, u8>& memory, u16 address, Flags& flag_reg, cyc& cycles);
void rra(u8& acc_reg, Flags& flag_reg, cyc& cycles);
void rr_r(u8& reg, Flags& flag_reg, cyc& cycles);
void rr_MHL(EmulatorMemory<u16, u8>& memory, u16 address, Flags& flag_reg, cyc& cycles);
void rrca(u8& acc_reg, Flags& flag_reg, cyc& cycles);
void rrc_r(u8& reg, Flags& flag_reg, cyc& cycles);
void rrc_MHL(EmulatorMemory<u16, u8>& memory, u16 address, Flags& flag_reg, cyc& cycles);
void rst_0(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void rst_1(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void rst_2(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void rst_3(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void rst_4(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void rst_5(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void rst_6(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void rst_7(u16& pc, u16& sp, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void sbc_A_r(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void sbc_A_n(u8& acc_reg, NextByte const& args, Flags& flag_reg, cyc& cycles);
void sbc_A_MHL(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void sbc_HL_ss(u8& h_reg, u8& l_reg, u16 value, Flags& flag_reg, cyc& cycles);
void scf(Flags& flag_reg, cyc& cycles);
void set_r(unsigned int bit_number, u8& reg, cyc& cycles);
void set_MHL(unsigned int bit_number, u16 hl_reg, EmulatorMemory<u16, u8>& memory, cyc& cycles);
void sla_r(u8& reg, Flags& flag_reg, cyc& cycles);
void sla_MHL(EmulatorMemory<u16, u8>& memory, u16 address, Flags& flag_reg, cyc& cycles);
void sll_r_undoc(u8& reg, Flags& flag_reg, cyc& cycles);
void sll_MHL_undoc(EmulatorMemory<u16, u8>& memory, u16 address, Flags& flag_reg, cyc& cycles);
void sra_r(u8& reg, Flags& flag_reg, cyc& cycles);
void sra_MHL(EmulatorMemory<u16, u8>& memory, u16 address, Flags& flag_reg, cyc& cycles);
void srl_r(u8& reg, Flags& flag_reg, cyc& cycles);
void srl_MHL(EmulatorMemory<u16, u8>& memory, u16 address, Flags& flag_reg, cyc& cycles);
void sub_n(u8& acc_reg, NextByte const& args, Flags& flag_reg, cyc& cycles);
void sub_r(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void sub_MHL(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void xor_n(u8& acc_reg, NextByte const& args, Flags& flag_reg, cyc& cycles);
void xor_r(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);
void xor_MHL(u8& acc_reg, u8 value, Flags& flag_reg, cyc& cycles);

void print_adc_r_s(std::ostream& ostream, std::string const& dest, std::string const& src);
void print_adc_r_n(std::ostream& ostream, std::string const& reg, NextByte const& args);
void print_add(std::ostream& ostream, std::string const& dest, std::string const& src);
void print_add_r_n(std::ostream& ostream, std::string const& reg, NextByte const& args);
void print_and_r(std::ostream& ostream, std::string const& reg);
void print_and_n(std::ostream& ostream, NextByte const& args);
void print_bit(std::ostream& ostream, unsigned int bit_number, std::string const& src);
void print_call_nn(std::ostream& ostream, NextWord const& args);
void print_call_cc_nn(std::ostream& ostream, NextWord const& args, std::string const& condition);
void print_ccf(std::ostream& ostream);
void print_cp(std::ostream& ostream, std::string const& reg);
void print_cp(std::ostream& ostream, NextByte const& args);
void print_cpl(std::ostream& ostream);
void print_daa(std::ostream& ostream);
void print_di(std::ostream& ostream);
void print_djnz(std::ostream& ostream, NextByte const& args);
void print_dec(std::ostream& ostream, std::string const& reg);
void print_dec_undocumented(std::ostream& ostream, std::string const& reg);
void print_ei(std::ostream& ostream);
void print_halt(std::ostream& ostream);
void print_im(std::ostream& ostream, unsigned int interrupt_mode);
void print_inc(std::ostream& ostream, std::string const& reg);
void print_inc_undocumented(std::ostream& ostream, std::string const& reg);
void print_jp_nn(std::ostream& ostream, NextWord const& args);
void print_jp_cc_nn(std::ostream& ostream, NextWord const& args, std::string const& condition);
void print_jp_Mss(std::ostream& ostream, std::string const& reg);
void print_jr(std::ostream& ostream, NextByte const& args);
void print_jr(std::ostream& ostream, std::string const& condition, NextByte const& args);
void print_ld(std::ostream& ostream, std::string const& dest, std::string const& src);
void print_ld_undocumented(std::ostream& ostream, std::string const& dest, std::string const& src);
void print_ld(std::ostream& ostream, std::string const& dest, NextByte const& args);
void print_ld_undocumented(std::ostream& ostream, std::string const& dest, NextByte const& args);
void print_ld(std::ostream& ostream, std::string const& dest, NextWord const& args);
void print_ld_dd_nn(std::ostream& ostream, std::string const& reg, NextWord const& args);
void print_ld_Mnn_dd(std::ostream& ostream, NextWord const& args, std::string const& src);
void print_ld_Mnn_dd_undocumented(std::ostream& ostream, NextWord const& args, std::string const& src);
void print_ld_dd_Mnn(std::ostream& ostream, std::string const& dest, NextWord const& args);
void print_ld_dd_Mnn_undocumented(std::ostream& ostream, std::string const& dest, NextWord const& args);
void print_ldd(std::ostream& ostream);
void print_lddr(std::ostream& ostream);
void print_ldi(std::ostream& ostream);
void print_ldir(std::ostream& ostream);
void print_neg(std::ostream& ostream);
void print_nop(std::ostream& ostream);
void print_or_r(std::ostream& ostream, std::string const& reg);
void print_or_r_undocumented(std::ostream& ostream, std::string const& reg);
void print_or_n(std::ostream& ostream, NextByte const& args);
void print_pop(std::ostream& ostream, std::string const& reg);
void print_push(std::ostream& ostream, std::string const& reg);
void print_res(std::ostream& ostream, unsigned int bit_number, std::string const& src);
void print_ret(std::ostream& ostream);
void print_ret(std::ostream& ostream, std::string const& condition);
void print_rla(std::ostream& ostream);
void print_rl(std::ostream& ostream, std::string const& reg);
void print_rlc(std::ostream& ostream, std::string const& reg);
void print_rlca(std::ostream& ostream);
void print_rld(std::ostream& ostream);
void print_rst(std::ostream& ostream, int number);
void print_rr(std::ostream& ostream, std::string const& reg);
void print_rra(std::ostream& ostream);
void print_rrc(std::ostream& ostream, std::string const& reg);
void print_rrca(std::ostream& ostream);
void print_rrd(std::ostream& ostream);
void print_sbc_r_s(std::ostream& ostream, std::string const& dest, std::string const& src);
void print_sbc_r_s_undocumented(std::ostream& ostream, std::string const& dest, std::string const& src);
void print_sbc_r_n(std::ostream& ostream, std::string const& reg, NextByte const& args);
void print_scf(std::ostream& ostream);
void print_set(std::ostream& ostream, unsigned int bit_number, std::string const& src);
void print_sla(std::ostream& ostream, std::string const& reg);
void print_sra(std::ostream& ostream, std::string const& reg);
void print_sll(std::ostream& ostream, std::string const& reg);
void print_srl(std::ostream& ostream, std::string const& reg);
void print_sub(std::ostream& ostream, std::string const& reg);
void print_sub_undocumented(std::ostream& ostream, std::string const& reg);
void print_sub(std::ostream& ostream, NextByte const& args);
void print_xor_r(std::ostream& ostream, std::string const& reg);
void print_xor_r_undocumented(std::ostream& ostream, std::string const& reg);
void print_xor_n(std::ostream& ostream, NextByte const& args);
}
// @formatter:on
